%%  Calculating Stroking Frequency Visually From Data
%   This script will be used to determine the stroking frequency of each
%   deployment visually from the y-axis of the gyroscope
%   uiimport('C:\Users\William Gough\Documents\Academic Materials\Stanford University\Chapter 1\Data\all_prh_files\Droned Deployments\bw170814-31 10Hzprh.mat')
[~,morphodata] = xlsread('C:\Users\William Gough\Documents\Academic Materials\Stanford University\Chapter 1\Data\Whale Measurements Droned Animals.xlsx',1,'A2:B66');
morphometrics = xlsread('C:\Users\William Gough\Documents\Academic Materials\Stanford University\Chapter 1\Data\Whale Measurements Droned Animals.xlsx',1,'E2:S66');
morphodata(:,3:17) = num2cell(morphometrics);

[filename, fileloc] = uigetfile('MultiSelect','off');
load([fileloc filename]);
deploynum = str2num(filename(1:3));
deployname = filename(4:(end-12));

% if isempty(find(isnan(Gw))) == 0;
%     Aw = naninterp(Gw);
%     p = naninterp(p);
%     pitch = naninterp(pitch);
% end

for a=1:length(morphometrics(:,1)); % identify the whale from the list of possible individuals/deployments
    str = morphodata(a,1);
    IDname = str{1};
    if strcmp(INFO.whaleName,IDname);
        TL = morphometrics(a,1); % total length in meters
        mass = morphometrics(a,4); % mass based on Shirel's allometric curves
        Sa = morphometrics(a,7); % wetted surface area in meters squared
        maxdiam = morphometrics(a,10); % widest diameter of the animal in meters
        BMR = morphometrics(a,15); % basal metabolic rate calculated using Jean Potvin's method
        break
    else
        continue
    end
end
clear a;

beforewhale = find(tagon,1);
afterwhale = find(tagon);
afterwhale = afterwhale(end);

offsetzero = 0;
ptrunc = p((beforewhale):end,1);
pitchtrunc = pitch((beforewhale):end,1);
yaxisgyro = Gw((beforewhale):end,2);
NaNs = find(isnan(yaxisgyro)==1); 
yaxisgyro(NaNs,:) = []; % throws out NaNs
ptrunc(NaNs,:) = [];
pitchtrunc(NaNs,:) = [];

deptharray = [];
timeabovezeroavg = [];
zeroavg = mean(yaxisgyro(100:(end-100)));
flukingstartpoints = [];

fluklengththresh = 100;
flukheightthresh = zeroavg*2;
flukmagnitudethresh = 1;
flukclaritythresh = 15;
    
for a=1:length(yaxisgyro); % determines periods of depth above a depth threshold (2m) 
    if ptrunc(a)<2;
        deptharray(a,1) = 0;
    else
        deptharray(a,1) = 1;
    end
end
clear a;

fs = 10; % frame rate
N = 10; % order
Fpasslow = 0.44; % lowpass filter passband frequency
Fstoplow = 1.0; % lowpass filter stopband frequency
Wpasslow = 0.1; % passband weight
Wstoplow = 0.1; % stopband weight
denslow  = 20; % density factor
blow  = firpm(N, [0 Fpasslow Fstoplow fs/2]/(fs/2), [1 1 0 0], [Wpasslow Wstoplow], ...
       {denslow});
Hdlow = dfilt.dffir(blow);
yaxisgyro(:,2) = filtfilt(blow,1,yaxisgyro); % lowpass filters the dataset

% % Use this highpass filter if you have to use the accelerometer instead of
% % the gyroscope. Make sure to change Gw(:,2) to Aw(:,1) above.
% Fstophigh = 0.072;    % Highpass Filter Stopband Frequency
% Fpasshigh = 0.1368;   % Highpass Filter Passband Frequency
% Dstophigh = 0.0001;          % Stopband Attenuation
% Dpasshigh = 0.057501127785;  % Passband Ripple
% denshigh  = 20;              % Density Factor
% [N, Fo, Ao, W] = firpmord([Fstophigh, Fpasshigh]/(fs/2), [0 1], [Dstophigh, Dpasshigh]);
% bhigh  = firpm(N, Fo, Ao, W, {denshigh});
% Hdhigh = dfilt.dffir(bhigh);
% yaxisgyro(:,2) = filtfilt(bhigh,1,yaxisgyro(:,2));

for a=1:length(yaxisgyro(:,2)); % creates an array for segments when the gyroscope data is above the average of the dataset (proxy for fluking - "zero crossing")
    if (yaxisgyro(a,2)) >= (zeroavg); % change this between 0 and (zeroavg*x)
        timeabovezeroavg(a,1) = 1;
    else
        timeabovezeroavg(a,1) = 0;
    end
end
clear a;

flukingstartpoints(1) = 0;
lookahead = 3;

for a=2:length(yaxisgyro(:,2))-lookahead; % finds the start of individual flukebeats
    if timeabovezeroavg(a) == 1 && timeabovezeroavg(a-1) == 0 && timeabovezeroavg(a+lookahead) == 1; % tests if there is a zero crossing
        flukingstartpoints(a,1) = 1;
    else
        flukingstartpoints(a,1) = 0;
    end
end
clear a;

for a=1:lookahead % adds zeros onto the end of the flukebeat list
    flukingstartpoints(end+1) = 0;
end
clear a;

flukebeatstart = [];
flukebeatend = [];
useableflukebeats = [];

for a=1:length(flukingstartpoints); % creates a list of starting and ending indices for each flukebeat found in the previous step
    if flukingstartpoints(a) == 0;
        continue
    else
        flukebeatstart(end+1,1) = a;
        for b=(a+1):length(flukingstartpoints);
            if flukingstartpoints(b) == 0;
                continue
            else
                flukebeatend(end+1,1) = b;
                break
            end
        end
    end
end
clear a b;

flukebeatend(end+1) = length(flukingstartpoints);
useableflukebeats = [flukebeatstart flukebeatend];

for a=1:length(useableflukebeats(:,1)); % tests whether a particular flukebeat is less than a threshold length (indices). If it is, a trapezoidal integration is run for the flukebeat
    if minus((useableflukebeats(a,2)),(useableflukebeats(a,1))) >= fluklengththresh;
        continue
    else
        tempforint = yaxisgyro(((useableflukebeats(a,1)):(useableflukebeats(a,2))),2);
        useableflukebeats(a,3) = trapz(tempforint); % runs the trapezoidal integration and adds it to the third colum of the flukebeat list
        useableflukebeats(a,4) = trapz(abs(tempforint)); % runs another trapezoidal integration to determine approximate magnitude of the flukebeat
        [pks,locs] = findpeaks(yaxisgyro(useableflukebeats(a,1):useableflukebeats(a,2),2));
        [pksabs,locsabs] = findpeaks(abs(yaxisgyro(useableflukebeats(a,1):useableflukebeats(a,2),2)));
        highpks = find(pksabs > (flukheightthresh));
        if useableflukebeats(a,3) <= flukclaritythresh && ... % tests to make sure the flukebeat isn't too top-heavy
           useableflukebeats(a,3) >= -flukclaritythresh && ... % tests to make sure the flukebeat isn't too bottom-heavy
           useableflukebeats(a,4) >= flukmagnitudethresh && ... % tests to make sure the flukebeat magnitude is above a threshold
           length(locs) == 1 && ... % tests to make sure there is only one positive peak in the flukebeat
           length(locsabs) == 2 && ... % tests to make sure there are exactly two peaks (one positive, one negative) in a flukebeat
           isempty(highpks) == 0; % tests to make sure the flukebeat is at least as high as a threshold in the positive direction
            continue
        else
            useableflukebeats(a,3:4) = 0;
        end
    end
end
clear a;

indices = find(useableflukebeats(:,3)==0); % removes flukebeats that are within desired boundaries
useableflukebeats(indices,:) = [];

isfluking = zeros(length(yaxisgyro(:,1)),1);

for flukephase = useableflukebeats.' % creates a list of indices when the whale is (1) and is not (0) fluking
    isfluking(flukephase(1):flukephase(2)) = 1;
end

flukingnans = find(~isfluking);
flukingnums = find(isfluking);
isfluking(flukingnans) = NaN; % changes 0s into NaNs
isfluking(flukingnums) = zeroavg; % changes 1s into 0s
yaxisgyro = [yaxisgyro isfluking]; % appends the list of fluking times onto the gyroscope data
yaxisgyro = [yaxisgyro abs(yaxisgyro(:,2))];

useableflukebeats(:,5) = minus((useableflukebeats(:,2)),(useableflukebeats(:,1))); % calculate the frequency of each flukebeat
useableflukebeats(:,6) = useableflukebeats(:,5) ./ 10;
useableflukebeats(:,7) = 1 ./ useableflukebeats(:,6);
dsf = mean(useableflukebeats(:,7));

useableflukebeatdeep = [];
useableflukebeatdeep(:,1:2) = useableflukebeats(:,1:2);
useableflukebeatdeep(:,3) = useableflukebeats(:,7);

for a=1:length(useableflukebeatdeep(:,1));
    useableflukebeatdeep(a,4) = mean(ptrunc((useableflukebeatdeep(a,1)):(useableflukebeatdeep(a,2))));
    useableflukebeatdeep(a,5) = mean(pitchtrunc((useableflukebeatdeep(a,1)):(useableflukebeatdeep(a,2)))*180/pi);
    useableflukebeatdeep(a,6) = deptharray(useableflukebeatdeep(a,1));
end
clear a;

atsurface = find(~useableflukebeatdeep(:,6));
useableflukebeatdeep(atsurface,:) = [];
useableflukebeatdeep(:,6) = [];

isflukingdeep = zeros(length(yaxisgyro(:,1)),1);

for flukephasedeep = useableflukebeatdeep.' % creates a list of indices when the whale is (1) and is not (0) fluking
    isflukingdeep(flukephasedeep(1):flukephasedeep(2)) = 1;
end

flukingnans = find(~isflukingdeep);
flukingnums = find(isflukingdeep);
isflukingdeep(flukingnans) = NaN; % changes 0s into NaNs
isflukingdeep(flukingnums) = zeroavg; % changes 1s into 0s
yaxisgyro = [yaxisgyro isflukingdeep]; % appends the list of fluking times onto the gyroscope data
dsfdeep = mean(useableflukebeatdeep(:,3));

disp('Dominant Stroking Frequency (Below X Meters): ');
disp(dsfdeep);
disp('Number of Tailbeats Used (Below X Meters): ');
disp(length(useableflukebeatdeep(:,3)));

outputs = [deploynum dsfdeep length(useableflukebeatdeep(:,3))];
name = getfield(INFO, 'whaleName');

clear NaNs N Fpasslow Fstoplow Wpasslow Wstoplow denslow blow Hdlow ...
atsurface indices isfluking isflukingdeep flukclaritythresh flukheightthresh fluklengththresh flukmagnitudethresh...
flukebeatend flukebeatstart flukingstartpoints flukephase flukephasedeep flukingnans flukingnums...
highpks tempforint zeroavg timeabovezeroavg locs locsabs lookahead offsetzero pks pksabs deptharray;


%% Find Speed Measures For Each Tailbeat
jigspeed = speed.JJ(beforewhale:end,:);
NaNs = find(isnan(jigspeed)==1); 
jigspeed(NaNs,:) = []; % throws out NaNs

fs = 10; % frame rate
N = 35; % order
Fpasslow = 0.09; % lowpass filter passband frequency
Fstoplow = 0.2; % lowpass filter stopband frequency
Wpasslow = 0.4; % passband weight
Wstoplow = 0.4; % stopband weight
denslow  = 60; % density factor
blow  = firpm(N, [0 Fpasslow Fstoplow fs/2]/(fs/2), [1 1 0 0], [Wpasslow Wstoplow], ...
       {denslow});
Hdlow = dfilt.dffir(blow);
jigspeed(:,2) = filtfilt(blow,1,jigspeed); % lowpass filters the jiggle speed

for a=1:length(useableflukebeatdeep(:,1));
    if useableflukebeatdeep(a,2) >= length(jigspeed(:,2));
        useableflukebeatdeep((a:end),:) = [];
        break
    else
        useableflukebeatdeep(a,6) = mean(jigspeed((useableflukebeatdeep(a,1)):(useableflukebeatdeep(a,2)),2));
    end
end
clear a;

speedmin = min(speed.JJ(beforewhale:afterwhale,1));
speedthresh = speedmin+std(speed.JJ(beforewhale:afterwhale,1))

lowspeeds = find(useableflukebeatdeep(:,6) < speedthresh)
highspeedbeats = useableflukebeatdeep;
highspeedbeats(lowspeeds,:) = [];
highspeedbeats(:,7) = deploynum;

percentile25 = prctile(useableflukebeatdeep(:,6),25);
median = prctile(useableflukebeatdeep(:,6),50);
percentile75 = prctile(useableflukebeatdeep(:,6),75);

% fileloc = 'C:\Users\William Gough\Documents\Academic Materials\Stanford University\Chapter 1\Data\OutputCSVs\TailbeatsHighSpeed(Deep)\';
% % locnam = [fileloc INFO.whaleName ' Tailbeats.csv']
% locnam = [fileloc deployname ' SpeedBeats.csv']
% csvwrite(locnam,highspeedbeats);

% fileloc = 'C:\Users\William Gough\Documents\Academic Materials\Stanford University\Chapter 1\Data\FlukingPNGs\SpeedVFreq\';
% 
% R = corrcoef(highspeedbeats(:,6),highspeedbeats(:,3));
% Rsquared=R(2)^2;
% 
% freqvspeedmodel = fitlm(highspeedbeats(:,6),highspeedbeats(:,3));
% figure('units','normalized','outerposition',[0 0 1 1]);
% hold on
% scatter(highspeedbeats(:,6),highspeedbeats(:,3),4,'filled');
% title(['Frequency vs. Mean Speed: ',num2str(name),' (n = ',num2str(length(highspeedbeats(:,1))),')']);
% xlabel('Mean Speed (m/s)');
% ylabel('Frequency (Hz)');
% fitline = lsline;
% slpyint = polyfit(get(fitline,'xdata'),get(fitline,'ydata'),1);
% legend(['R^2 = ' num2str(Rsquared)],['Y = ' num2str(slpyint(1,1)) 'X + ' num2str(slpyint(1,2))]);
% saveas(gcf,[fileloc num2str(name) ' speeds' '.png']);
% savefig([fileloc num2str(name) ' speeds' '.fig']);
% 
% disp('Slope and Intercept (Speed vs Frequency (m/s)): ');
% disp(slpyint);
% disp('R2 (Speed vs Frequency (m/s)): ');
% disp(Rsquared);
% 
% outputs(1,4:9) = [percentile25 median percentile75 slpyint(1,1) slpyint(1,2) Rsquared];
% 
% clear NaNs N Fpasslow Fstoplow Wpasslow Wstoplow denslow blow Hdlow ...
% fitline R Rsquared slpyint;


%% Calculating Thrust Power (Watts), Drag Coefficient, and Reynolds Number For Each Flukebeat
yatesequations = xlsread('I:\REU Hayden\Digitizing Yates Figure\Digitized Yates Figure.xlsx',2,'A2:E82');
yatesequations2 = xlsread('I:\REU Hayden\Digitizing Yates Figure\Digitized Yates Figure.xlsx',4,'A2:E82');
alltailbeatsinfo = xlsread('I:\REU Hayden\Droned Tailbeats Info.xlsx',1,'A2:G115325');
morphometrics = xlsread('I:\REU Hayden\Data Sheet For Hayden.xlsx',1,'A2:N9');
morphometrics(:,2:3) = [];
alltailbeatsinfo(:,5:6) = [];

[filename, fileloc] = uigetfile('MultiSelect','off');
load([fileloc filename]);
deploynum = str2num(filename(1:3));
deployname = filename(4:(end-12));

for a=1:length(morphometrics(:,1)); % identify the whale from the list of possible individuals/deployments
    if deploynum == morphometrics(a,1);
        TL = morphometrics(a,2); % total length in meters
        Sa = morphometrics(a,8); % wetted surface area in meters squared
        Fa = morphometrics(a,9); % planform area of flukes in meters squared
        C = morphometrics(a,10); % chord length of fluke in meters
        density = 1000; % density of seawater
        alpha = 0.523; % approximated as 30 degrees or 0.523 radians
        h = 0.5*(0.2*TL); % heave amplitude (midline to peak) approximated as one-half of 20 percent of body length
        Ct = 0;
        efficiency = 0;
        break
    else
        continue
    end
end
clear a;

thiswhaletailbeats = [];
b = 1;

for a=1:length(alltailbeatsinfo(:,1));
    if deploynum == alltailbeatsinfo(a,5);
        thiswhaletailbeats(b,:) = alltailbeatsinfo(a,:);
        b = b+1;
    else
        continue
    end
end
clear a b;

for a=1:length(thiswhaletailbeats(:,1)); % calculate out the coefficient of thrust (Ct) and efficiency using the graphs in Yates
    w = 2*pi*(thiswhaletailbeats(a,1));
    feathering = (((thiswhaletailbeats(a,4))*alpha)/(w*h));
    round2 = @(x, d) round(x * 10^d)/10^d; 
    roundedfeathering = round2(feathering,2);
    reduced = ((w*C)/(thiswhaletailbeats(a,4)));
    for b=1:81;
        roundedyates = round2((yatesequations(b,1)),2);
        if roundedfeathering == roundedyates;
            Ct = (((yatesequations(b,2))*(reduced^3)) + ((yatesequations(b,3))*(reduced^2)) + ((yatesequations(b,4))*reduced) + (yatesequations(b,5)));
            efficiency = (((yatesequations2(b,2))*(reduced^3)) + ((yatesequations2(b,3))*(reduced^2)) + ((yatesequations2(b,4))*reduced) + (yatesequations2(b,5)));
            break
        else if roundedfeathering >= 0.8000;
                Ct = (((yatesequations(81,2))*(reduced^3)) + ((yatesequations(81,3))*(reduced^2)) + ((yatesequations(81,4))*reduced) + (yatesequations(81,5)));
                efficiency = (((yatesequations2(81,2))*(reduced^3)) + ((yatesequations2(81,3))*(reduced^2)) + ((yatesequations2(81,4))*reduced) + (yatesequations2(81,5)));
            break
            else
                continue
            end
        end
    end
    thiswhaletailbeats(a,6) = efficiency;
    thiswhaletailbeats(a,7) = (0.5*density*Ct*((thiswhaletailbeats(a,4))^3)*Fa*((h/C)^2))*efficiency; % calculates the thrust power for each tailbeat
    thiswhaletailbeats(a,8) = ((thiswhaletailbeats(a,7))/(0.5*density*Sa*((thiswhaletailbeats(a,4))^3))); % calculates the drag coefficient for each tailbeat
    thiswhaletailbeats(a,9) = ((TL*(thiswhaletailbeats(a,4)))/(1.044*10^-6)); % calculates the reynolds number for each tailbeat
end
clear a b;

% thiswhaletailbeats(:,12) = log10(thiswhaletailbeats(:,7));
% thiswhaletailbeats(:,13) = log10(thiswhaletailbeats(:,9));
% thiswhaletailbeats(:,14) = log10(thiswhaletailbeats(:,10));
% thiswhaletailbeats(:,15) = log10(thiswhaletailbeats(:,11));

avgthrust = mean(thiswhaletailbeats(:,7));
avgdrag = mean(thiswhaletailbeats(:,8));
avgreynolds = mean(thiswhaletailbeats(:,9));

disp('Average Of Thrust Power For Each Flukebeat: ');
disp(avgthrust);
disp('Average Of Drag Coefficient For Each Flukebeat: ');
disp(avgdrag);
disp('Average Reynolds Number During Fluking: ');
disp(avgreynolds);

% colNames = {'Flukebeat_Start','Flukebeat_End','Frequency','Depth','Pitch','Mean_Speed','Mean_Speed_BL','Thrust_Power','Drag_Coefficient','Reynolds_Number','Log10_Mean_Speed_BL','Log10_Thrust_Power','Log10_Drag_Coefficient','Log10_Reynolds_Number'};
% flukebeatinformation = array2table(useableflukebeatdeep,'VariableNames',colNames);

fileloc = 'C:\Users\William Gough\Documents\Academic Materials\Stanford University\Mentorship\REU Hayden\Fluking PNGs\SpeedVThrust\';

R = corrcoef(thiswhaletailbeats(:,4),thiswhaletailbeats(:,7));
Rsquared=R(2)^2;

thrustvspeedmodel = fitlm(thiswhaletailbeats(:,4),thiswhaletailbeats(:,7));
figure('units','normalized','outerposition',[0 0 1 1]);
scatter(thiswhaletailbeats(:,4),thiswhaletailbeats(:,7),10,thiswhaletailbeats(:,1),'filled');
hold on;
title(['Mean Speed vs. Thrust Power: #',num2str(deploynum),' (n = ',num2str(length(thiswhaletailbeats(:,1))),')']);
xlabel('Mean Speed (m/s)');
ylabel('Thrust Power (W)');
bar = colorbar;
ylabel(bar,'Frequency (Hz)');
poly = polyfit(thiswhaletailbeats(:,4),thiswhaletailbeats(:,7),2);
curve = polyval(poly,thiswhaletailbeats(:,4));
scatter(thiswhaletailbeats(:,4),curve,3,'filled');
legend(['R^2 = ' num2str(Rsquared)],['Y = ' num2str(poly(1,1)) 'X^2 + ' num2str(poly(1,2)) 'X + ' num2str(poly(1,3))]);
% fitline = lsline;
% slpyint = polyfit(get(fitline,'xdata'),get(fitline,'ydata'),1);
% legend(['R^2 = ' num2str(Rsquared)],['Y = ' num2str(slpyint(1,1)) 'X + ' num2str(slpyint(1,2))]);
saveas(gcf,[fileloc num2str(deploynum) ' SpeedVThrust' '.png']);
savefig([fileloc num2str(deploynum) ' SpeedVThrust' '.fig']);

fileloc = 'C:\Users\William Gough\Documents\Academic Materials\Stanford University\Mentorship\REU Hayden\Fluking PNGs\ReynoldsVDrag\';

R = corrcoef(thiswhaletailbeats(:,9),thiswhaletailbeats(:,8));
Rsquared=R(2)^2;

dragvreynoldsmodel = fitlm(thiswhaletailbeats(:,9),thiswhaletailbeats(:,8));
figure('units','normalized','outerposition',[0 0 1 1]);
hold on;
scatter(thiswhaletailbeats(:,9),thiswhaletailbeats(:,8),10,'filled');
title(['Reynolds Number vs. Drag Coefficient: #',num2str(deploynum),' (n = ',num2str(length(thiswhaletailbeats(:,1))),')']);
xlabel('Reynolds Number');
ylabel('Drag Coefficient');
poly = polyfit(thiswhaletailbeats(:,9),thiswhaletailbeats(:,8),1);
curve = polyval(poly,thiswhaletailbeats(:,9));
scatter(thiswhaletailbeats(:,9),curve,3,'filled');
legend(['R^2 = ' num2str(Rsquared)],['Y = ' num2str(poly(1,1)) 'X + ' num2str(poly(1,2))]);
% fitline = lsline;
% slpyint = polyfit(get(fitline,'xdata'),get(fitline,'ydata'),1);
% legend(['R^2 = ' num2str(Rsquared)],['Y = ' num2str(slpyint(1,1)) 'X + ' num2str(slpyint(1,2))]);
saveas(gcf,[fileloc num2str(deploynum) ' ReynoldsVDrag' '.png']);
savefig([fileloc num2str(deploynum) ' ReynoldsVDrag' '.fig']);

clear alpha bar C Ct density Fa fitline h morphometrics R Rsquared...
reduced round2 roundedtheta roundedyates Sa slpyint str theta TL w;